name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go environment
        uses: actions/setup-go@v3
        with:
          go-version: '1.19'

      - name: list dir
        run: |
          ls -la 

      - name: Install dependencies
        working-directory: ./microservices/app/
        run: |
          go mod tidy
          go mod vendor  

      - name: Build Go project
        working-directory: ./microservices/app/
        run: |
          go build -o time-service .

      - name: Build Docker image
        working-directory: ./microservices/app/
        run: |
          docker build -t time-service .

      - name: Run Docker container
        working-directory: ./microservices/app/
        run: |
          docker run -d -p 8081:8081 time-service
#        env:
#          DOCKER_BUILDKIT: 1

#  deploy:
#    runs-on: ubuntu-latest
#    needs: build
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3

#       - name: Log in to GCP


#      - name: Log in to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#
#      - name: Push Docker image to Docker Hub
#        run: |
#          docker tag time-service:latest yourdockerusername/time-service:latest
#          docker push yourdockerusername/time-service:latest  # Wypycha obraz na Docker Hub
#
#      - name: Deploy to your server (optional)
#        run: |
#          # Możesz dodać komendy do wdrożenia na swoim serwerze, np. zdalne uruchomienie kontenera
#          ssh user@yourserver "docker pull yourdockerusername/time-service:latest && docker run -d -p 8081:8081 yourdockerusername/time-service"
